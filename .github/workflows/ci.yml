name: CI
on:
  - push
  - pull_request
  - workflow_dispatch

jobs:
  build-linux-legacy:
    name: Linux (legacy)
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Build
      run: docker build -f .github/workflows/Dockerfile.legacy .

################################################################################

  build-linux-qt6:
    name: Linux (Qt6)
    runs-on: ubuntu-latest
    steps:
#    - name: Maximize build space
#      uses: easimon/maximize-build-space@master
#      with:
#        remove-dotnet: 'true'
#        remove-android: 'true'
#        remove-haskell: 'true'
#        remove-codeql: 'true'

    - name: Checkout
      uses: actions/checkout@v4

    - name: Build
      # Use unconfined `docker run` instead of (confined) `docker build` as
      # the latter blocks faccessat2 calls required by the latest pacman
      #run: docker run --security-opt seccomp=unconfined --volume $(pwd):/home/tw archlinux /bin/sh -c "/home/tw/.github/workflows/build.arch-qt6"
      run: docker build -f .github/workflows/Dockerfile.arch-qt6 .

################################################################################

  build-sanitizer:
    name: Sanitizer (Linux)
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Build
      run: docker build -f .github/workflows/Dockerfile.sanitizer .

################################################################################

  coverage-linux:
    name: Coverage (Linux)
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install dependencies
      run: sudo apt update && sudo apt install --assume-yes --no-install-recommends libhunspell-dev liblua5.4-dev libpoppler-qt6-dev libpoppler-private-dev make poppler-data qt6-5compat-dev qt6-base-dev qt6-declarative-dev qt6-tools-dev qt6-tools-dev-tools zlib1g-dev xvfb fonts-urw-base35 poppler-data lcov

    - name: Configure
      run: cmake -B build -DCMAKE_BUILD_TYPE="Debug" -DWITH_COVERAGE=On .

    - name: Build
      run: cmake --build build

    - name: Test
      working-directory: build
      run: |
        echo "::group::Initialization"
        lcov --zerocounters --directory .
        echo "::endgroup::"
        echo "::group::Run tests"
        xvfb-run ctest -V
        echo "::endgroup::"
        echo "::group::Collect data"
        lcov --capture --all --directory . --output-file "coverage.info"
        lcov --remove "coverage.info" '/usr/*' --output-file "coverage.info"
        lcov --remove "coverage.info" "$(pwd)"'/*_autogen/*' --output-file "coverage.info"
        echo "::endgroup::"
        echo "::group::Info"
        lcov --list coverage.info #debug info
        echo "::endgroup::"
    - name: Upload to Codecov
      uses: codecov/codecov-action@v5
      with:
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true

################################################################################

  build-win-msys:
    name: Windows (MSYS)
    runs-on: windows-latest
    if: false
    defaults:
      run:
        shell: msys2 {0}

    steps:
    - name: Configure Git
      run: git config --global core.autocrlf input
      shell: bash

    - name: Setup MSYS
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: mingw-w64-x86_64-cmake git make mingw-w64-x86_64-gcc mingw-w64-x86_64-hunspell mingw-w64-x86_64-lua mingw-w64-x86_64-poppler mingw-w64-x86_64-qt5

    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure
      run: cmake -G 'MSYS Makefiles' -B build -DTW_BUILD_ID='github' -DTEXWORKS_ADDITIONAL_LIBS='shlwapi' -DQT_DEFAULT_MAJOR_VERSION=5

    - name: Build
      run: cmake --build build -j

    - name: Test
      run: ctest -V
      working-directory: build
      env:
        QT_FORCE_STDERR_LOGGING: 1

################################################################################

  build-win-msvc:
    name: Windows (MSVC)
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: 6.8.*
        modules: qt5compat

      # Strawberry perl comes with all sorts of libraries (without headers) that
      # can wreak havoc when building some of the dependencies
    - name: Remove Strawberry Perl
      run: rm -r -fo C:/Strawberry

    - name: Install dependencies
      run: |
        cmake -B "${{ runner.workspace }}/tw-deps-build" -S "${{ github.workspace }}/.github/actions/msvc-dependencies" -DCMAKE_INSTALL_PREFIX="${{ runner.workspace }}/tw-deps"
        cmake --build "${{ runner.workspace }}/tw-deps-build" --config Release

    - name: Configure
      run: cmake -B build -DTW_BUILD_ID='github' -DCMAKE_PREFIX_PATH="${{ runner.workspace }}/tw-deps" -Dgp_tool='none' -DQT_DEFAULT_MAJOR_VERSION=6

    - name: Build
      run: cmake --build build --config Release

    - name: Prepare for testing
      run: |
        cmake -E copy_directory build/share build/Release/share
        cd "${{ runner.workspace }}/tw-deps/bin"
        cmake -E copy freetype.dll lcms2.dll libhunspell.dll libpng16.dll lua.dll openjp2.dll poppler.dll poppler-qt6.dll tiff.dll zlib1.dll "${{ github.workspace }}/build/Release/"

    - name: Test
      run: ctest -V -C Release
      working-directory: build
      env:
        QT_FORCE_STDERR_LOGGING: 1

################################################################################

  macosx-homebrew:
    name: Mac OS X (Homebrew)
    runs-on: macos-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
        # /usr/local/bin/2to3 and some other programs, as well as versioned
        # variants (e.g. 2to3-3.11) are symlinked to the native python
        # installation but prevent the homebrew install from succeeding
        # So we remove them
        cd /usr/local/bin && rm -f 2to3* idle* pydoc* python*
        brew update > /tmp/brew_update.log || { echo "::error::Updating homebrew failed"; cat /tmp/brew_update.log; exit 1; }
        brew install hunspell poppler-qt5 lua qt@5
        # As poppler-qt5 conflicts with poppler, we need to force-link it
        brew link --force poppler-qt5

    - name: /usr/local/opt
      run: find /usr/local/opt

    - name: /opt/homebrew/Cellar
      run: find /opt/homebrew/Cellar

    - name: Configure
      run: cmake -B build -DTW_BUILD_ID='github' ${GITHUB_WORKSPACE} -DCMAKE_PREFIX_PATH="`brew --prefix qt@5`" -DQT_DEFAULT_MAJOR_VERSION=5

    - name: Build
      run: make -j
      working-directory: build

    - name: Test
      run: ctest -V
      working-directory: build

################################################################################

  build-macosx-macports:
    name: Mac OS X (MacPorts)
    runs-on: macos-latest
    if: false
    strategy:
      matrix:
        include:
        - macports-version: 2.6.2
          macports-platform: 10.15-Catalina

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install MacPorts
      run: |
        wget https://github.com/macports/macports-base/releases/download/v${{ matrix.macports-version }}/MacPorts-${{ matrix.macports-version }}-${{ matrix.macports-platform }}.pkg
        sudo /usr/sbin/installer -pkg MacPorts-${{ matrix.macports-version }}-${{ matrix.macports-platform }}.pkg -target /
        echo "::add-path::/opt/local/bin:/opt/local/sbin"

    - name: Install Dependencies
      run: sudo port selfupdate && sudo port install hunspell lua poppler-qt5 qt5-qtbase qt5-qtdeclarative qt5-qtscript qt5-qttools

    - name: Configure
      run: cmake -B build -DTW_BUILD_ID='github' ${GITHUB_WORKSPACE} -DQT_DEFAULT_MAJOR_VERSION=5

    - name: Build
      run: make -j
      working-directory: build

    - name: Test
      run: ctest -V
      working-directory: build

